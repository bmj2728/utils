name: CI

on:
  push:
    branches: [ main, fix/*, feature/* ]
  pull_request:
    branches: [ main, fix/*, feature/* ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify go mod tidy
        run: |
          go mod download
          go mod tidy
          if [[ -n $(git status --porcelain go.mod go.sum) ]]; then
            echo "Error: go.mod and/or go.sum are not tidy."
            echo "Please run 'go mod tidy' locally and commit the changes."
            echo "Diff:"
            git diff
            exit 1
          else
            echo "Success: Go modules are tidy."
          fi


      - name: Verify go fmt
        run: |
          if [ -n "$(gofmt -s -l .)" ]; then
            echo "Code is not formatted with gofmt"
            gofmt -s -l .
            exit 1
          fi

      - name: go vet
        run: go vet ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          args: --timeout=5m

  test-quick:
    name: Quick Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: |
          go test -short ./...

  import-test:
    name: Import Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test library imports
        run: |
          mkdir test-import
          cd test-import
          go mod init test-import
          
          cat > main.go << 'EOF'
          package main
          
          import (
              "fmt"
              "github.com/${{ github.repository }}/pkg/version"
          )
          
          func main() {
              fmt.Printf("Version: %s\n", version.GetVersion())
              fmt.Println("âœ… Library import successful!")
          }
          EOF
          
          go mod edit -replace github.com/${{ github.repository }}=${{ github.workspace }}
          go mod tidy
          go run main.go
