name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, ready_for_review ]
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [ main ]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24'

jobs:
  check-changes:
    name: Check for Buildable Changes
    runs-on: ubuntu-latest
    outputs:
      has-cmd: ${{ steps.check.outputs.has-cmd }}
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for buildable content
        id: check
        run: |
          # Check if we have anything to build
          if [ -d "cmd" ] && [ "$(ls -A cmd 2>/dev/null)" ]; then
            echo "has-cmd=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "✅ Found cmd directory with contents"
          else
            echo "has-cmd=false" >> $GITHUB_OUTPUT
            # Still build if we're testing embedding capabilities
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "📦 Building for embedding test on main branch"
            else
              echo "should-build=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No cmd directory - skipping build"
            fi
          fi

  build:
    name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need for version info

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate version info
        id: version
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            VERSION=${GITHUB_REF_NAME}
          else
            VERSION="v0.0.0-dev.$(git rev-parse --short HEAD)"
          fi
          
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          GO_VERSION=$(go version | awk '{print $3}')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Build examples/tools
        if: needs.check-changes.outputs.has-cmd == 'true'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          
          for cmd_dir in cmd/*/; do
            if [ -d "$cmd_dir" ]; then
              cmd_name=$(basename "$cmd_dir")
              echo "Building $cmd_name for $GOOS/$GOARCH"
          
              go build \
                -ldflags="
                  -s -w
                  -X github.com/${{ github.repository }}/pkg/version.Version=${{ steps.version.outputs.version }}
                  -X github.com/${{ github.repository }}/pkg/version.CommitHash=${{ steps.version.outputs.commit }}
                  -X github.com/${{ github.repository }}/pkg/version.BuildDate=${{ steps.version.outputs.build_date }}
                  -X github.com/${{ github.repository }}/pkg/version.GoVersion=${{ steps.version.outputs.go_version }}
                " \
                -o dist/${cmd_name}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
                ./$cmd_dir
            fi
          done

      - name: Test embedding capability
        if: needs.check-changes.outputs.has-cmd == 'false'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Create a minimal test binary to verify embedding works
          mkdir -p dist
          
          cat > test-embed.go << 'EOF'
          package main
          
          import (
              "fmt"
              "github.com/${{ github.repository }}/pkg/version"
          )
          
          func main() {
              info := version.GetBuildInfo()
              fmt.Printf("Test build: %s\n", info.String())
          }
          EOF
          
          go build \
            -ldflags="
              -s -w
              -X github.com/${{ github.repository }}/pkg/version.Version=${{ steps.version.outputs.version }}
              -X github.com/${{ github.repository }}/pkg/version.CommitHash=${{ steps.version.outputs.commit }}
              -X github.com/${{ github.repository }}/pkg/version.BuildDate=${{ steps.version.outputs.build_date }}
              -X github.com/${{ github.repository }}/pkg/version.GoVersion=${{ steps.version.outputs.go_version }}
            " \
            -o dist/test-embed-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
            test-embed.go
          
          # Clean up
          rm test-embed.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 7

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check-changes, build]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Has CMD**: ${{ needs.check-changes.outputs.has-cmd }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Build**: ${{ needs.check-changes.outputs.should-build }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build.result }}" == "skipped" ]]; then
            echo "- **Build Status**: ⏭️ Skipped (no buildable content)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
